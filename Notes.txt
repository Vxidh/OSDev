OS DEV:-

We need certain documents to write an OS. We'll need to collect these documents to gain relevant knowledge. These docs are Intel® 64 and IA-32 Architectures Software Developer’s Manual (Volume
1, 2, 3)
 Intel® 3 Series Express Chipset Family Datasheet
 System V Application Binary Interface


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
SECTION 1 - PRELIMINARY KNOWLEDGE

LAYERS OF ABSTRACTION:

All electronic devices manipulate the flow of electricity to achieve whatever they want in the real world. Computers are no exception to this. 
Software is just indirect manipulation of electrical current at the physical level, in such a way that the underlying device produces desired effects.

A switch periodically requires human intervention. However we need an automatic switch based on the voltage level. We got transistors to do this shit for us.

At its core, transistor is just a resistor whose values vary based on input voltage.

A bit has two states: 0 and 1. 
Similar to light bulb, bits are made out the electrical stream from the power source. 
Bit 0 is represented with 0v
Bit 1 is from +3.V to +5V

MOSFETs are nothing but fancier transistors. It takes shorter switching time between states 0 and 1, is more stable, consumes less power and easier to produce.

Logic gates implement Boolean functions. All computer operations are built from the combination of logic gates, which are just combination of Boolean functions.

Using NOR and NAND, we can create all other Boolean functions.
NOR and NAND are hence called functionally complete (any possible Boolean function can be implemented using these 2 gates)

#CMOS CIRCUITS:

Underneath every logic gate, we have a circuits called a CMOS (Complementary MOSFET). CMOS consists of NMOS and PMOS. 

NMOS - for low input we give high outuput; for high input we give low output
PMOS - for low input we give low output; for high input we give high output

Simplest CMOS is an inverter or a NOT gate.
CMOS is just applying high or low voltage to PMOS/NMOS and then playing around with it. Nothing too deep.
NAND/NOR is just playing around with whether it is connected in series or in parallel.

a K-input gate uses k-PMOS and k-NMOS transistors.

An implemented circuit with its wires and transistors is stored physically in a package called a chip. 

##MACHINE LANGUAGE:

Machine language is a collection of unique but patterns that a device can identify and perform a corresponding action on. A machine instruction is a unique bit patterns that a device can identify.

The device with a computer's language is the CPU, which controls all the activities going on inside a computer. 
eg. 10100000 means adding two numbers
    000000101 means halting the computer.


Why does a bit pattern cause a device to do something?

Each instruction is implemented by an underlying circuit. Similar to how a function is called by its name, a bit pattern is just the name of a kutty function inside the cpu, which got executed when the cpu found the pattern.

How to read truth tables:
H --> high voltage, L --> low voltage, X --> don't care

Number of input pins = length of the inputted binary string
Number of output pins = produces binary strings of 4 bits from 8-bit input string.

Therefore the language is 2^8+2^4=272 (similar to how a DFA accepts an input string)

#Assembly Language:

Symbolic representation of binary machine code.
So instead of writing 0000000101 to halt the computer, we could just do hlt.

There's a level of abstraction implemented here, so instead of looking up cpu manuals we could just memorize these commands to do the same shit.

We also want to automate the process of device selection. (we want to simply write code and the device that implements this is chosen correctly)

Solving this is easy. We just give each instruction an index in binary called operation code/opcode and embed it as part of the input. 

eg. nand 1100, 1100 is just 001100100 (00 encodes a nand instruction)

We then add another device to select a device, based on a binary device for a particular instruction. Such a device is called a decoder.

In the above example, 00 encodes a nand instruction hence the cpu knows to send this input to a nand gate.

Assembler: Translate the file containing assembly code to binary string which can then be executed. 
The first assembler can be written in binary, and then we can add a level of abstraction and write the next assembler in assembly language itself.

A decoder is built out of logic gates and a storage device is something that can store 0/1 and is retrievable. It can be a magnetized device that uses magnetism to store info or it can be made out of electrical circuits that can change and remember states.


A computer does this entire thing:-
1) Fetches the instruction from a storage device
2) Decodes the instruction
3) Executes the instruction

i.e. a fetch-decode-execute cycle


Assembly code got repetitive, so we were able to add another level of abstraction to that. 


Program which converts programming languages to assembly language - compiler


The higher level a programming language is, the further away it is from hardware. Languages like python don't offer any direct functions to manipulate hardware, since it isn't necessary to get the job done.
This comes at a cost however, since this requires software to carry an extra code for managing hardware details.

I've used the term 'abstraction' a lot so far. Abstraction is just a technique to hide the complexity that is irrelevant to the problem.

We can see that abstraction is implemented whenever we have repeating patterns. We can just assign one operation/device to the pattern and simplify the process.

--> Logic gates abstract away the details of cmos
--> machine language abstracts away the details of logic gates
--> assembly abstracts away the details of machine languages
--> programming languages abstracts away the details of assembly languages.


Hence, abstraction reduces complexity but at the cost of carrying an extra bunch of software on it. Hence using C to write an OS is the best idea since C is just a thin wrapper of the hardware.


#COMPUTER ARCHITECTURE

FGPA --> Field-programmable gate array
This is an IC which can be programmed to perform tasks (in Verilog or VHDL)

Each 74HC00 chip can be configured as a gate, and a more sophisticated device can be built by combining multiple 74HC00. 
In a similar fashion, each FPGA device contains thousands of chips called logic blocks which is a more complicated chip than a 74HC00.

Diff b/w FPGA and other computers:
Programs in FPGA are implemented at the logic level while program in embedded computers are implemented at the assembly level.
Hence algorithms in FPGA is a description of the algo in logic gates, which the FPGA then follows to configure itself.


ASIC --> Application specific integrated circuit
Chip designed for a particular purpose rather than for general purpose. These chips are expensive as hell and any mistakes mean that they gotta be thrown away.

Computer Architecture = Instruction set architecture + Computer organization +  hardware

Highest level --> Instructions
Middle level --> Computer org
Lower level  --> hardware

ISA (instruction set arch):
Design of the environment which implements the instruction set. Essentially a runtime env which are similar to the interpreters of high level languages.

Computer organization:
Functional view of the design of the computer.
Two computers may have the same ISA but different COs 
eg. AMD and Intel implement x86 ISA but the hardware components are different.

Von-Neumann architecture is the simplest architecture which implements a fetch-decode-execute cycle. 
Von-Neumann architecture has CPU, memory, I/O and buses.

Buses are j electrical wires for sending raw bits between the above components.
Total number of wires = bus width.

How can we control a computer w/ only access to the cpu?
CPU communicates w/ everything else through these 2 interfaces:-

a) Registers:
They are a hardware component for high-speed data access and communication w/ other hardware devices.
They allow software to control hardware directly by writing to the register of the device, or receive info from the hardware when reading from the registers of the device.

Not all registers are used for comm tho. In a cpu, most registers are used as high speed storage for temp data.

b) Ports:
Port is a specialized register in a hardware device used for communication with other devices. When data is written to the port, it causes the hardware device to perform some operation according to values written to the port. 
Port doesn't store data unlike a register. It delegates the job to some other circuit.

RAM is usually controlled by a device called a memory controller. In this day and age, most CPUs have this device embedded so the cpu has a dedicated memory bus connecting the processor to the ram.
On older cpu's (pre-2009), this device was located in a chip known as MCH or Memory controller hub. In this case, cpu can't comm directly w/ the ram but rather to the mch chip which then communicates w/ the ram.
First option == better performance because no middleman.

##x86 architecture:

Chipset is a chip w/ multiple functions. (Historically they were actually a bunch of individual chips, each responsible for a function).

Each motherboard (the PCB that connects all the hardware) is defined by the chipset model which determines the env a cpu can control.

This env is made up of:
1) A slot or more for the cpu
2) A chipset of 2 chips which are the northbridge and southbridge chips
Northbridge: Responsible for high speed comm between cpu, main memory and graphics card
Southbridge: Responsible for comm with I/O devices and other devices which aren't performance sensitive
3) Slots for memory sticks
4) Slot or more for graphics cards
5) Generic slots for other devices
6) Ports for I/O devices

We'll need to program all of this to run an efficient OS, but the most important of them all is to program the x86 cpu.

x86 exec env:
The execution environment provides the facility to make code executable. It needs to address the following questions:

1) Supported operations? data transfer, arithmetic, control, floating point
2) Where are operands stored? registers, memory, stack, accumulators etc
3) How many explicit operands? 0,1,2 or 3
4) How is operand location specified? register, immediate, indirect etc
5) What type and size of operands? byte, int, float, double, string, vector etc

##x86 ASSEMBLY AND C:

We still need to write in assembly because not all instructions will be covered by the compiler. There will be edge cases we'll need to take care of.

#OBJDUMP:

objdump is a program that displays info about object files. 

Assume we have a program called hello.c which prints "Hello World".

$ objdump -d hello will display assembled contents of executable sections. A section is a block of memory that contains program code or data.

Code sections are executable by the CPU, while a data section is not executable. 
Non-executable sections such as .data and .bss are not displayed.

$ objdump -D hello displays assembly content of all sections.

XX 
NOTE: Writing code and compiling it.

We'll do majority of the coding and compiling in a native Linux environment as it is much easier to compile and run code because it has support for certain operations which Powershell does not.

You can either code remotely on WSL using the terminal or can also use vscode's wsl remote connection to open wsl.

To write and compile assembly, we'll need to install nasm in WSL 
We'll need to save the file with a .asm extension, and then use nasm to compile it. (install nasm on your linux env if it's not there already)

The command to compile the assembly file would be:
$ nasm -f bin test.asm -o test

-f defines the file format of the output file. In this case, the format is bin which means that the output file is just a binary file w/o any overhead meta data.

Post compiling, we can examine the output by doing
$ hd test 

hd (hexdump) is a program which displays the content of a file in hex format.
XX

#Assembly instructions:
Each assembly instruction can be broadly broken down into various subdivisions based on what each part is doing.

1) Instruction Prefixes: Appears at the start of an instruction. Prefixes are optional, its just another assembly instruction to be inserted 
so that the job is made easier for the assembler. Instruction with 2-3 byte opcodes include them by default.

2) Opcode: It is a number which identifies an instruction. Each opcode is given a mnemonic name that is human readable.

3) ModR/M: Specifies operands of an instruction. It can be a register, a memory location or an immediate value.

eg. add eax, ecx 
Machine code for this is 66 01 c8

0x66 is not the opcode. 0x01 is the opcode. 0x66 here is the operational instruction prefix, which dictates how many bits the operand is limited to.

SIB (Scale-Index-Base):

Effective address = Scale*Index+Base
Scale has values 1, 2, 4 and 8
